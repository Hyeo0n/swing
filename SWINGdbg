#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ptrace.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/user.h>
#include <unistd.h>
#include <errno.h>

void print_registers(struct user_regs_struct *regs) {
    printf("[+] Registers:\n");
    printf("RAX: 0x%llx\tRBX: 0x%llx\n", regs->rax, regs->rbx);
    printf("RCX: 0x%llx\tRDX: 0x%llx\n", regs->rcx, regs->rdx);
    printf("RSI: 0x%llx\tRDI: 0x%llx\n", regs->rsi, regs->rdi);
    printf("RSP: 0x%llx\tRBP: 0x%llx\n", regs->rsp, regs->rbp);
}

void handle_ni(pid_t pid) {
    struct user_regs_struct regs;

    if (ptrace(PTRACE_GETREGS, pid, NULL, &regs) == -1) {
        perror("GETREGS 실패");
        return;
    }

    unsigned long instr = ptrace(PTRACE_PEEKTEXT, pid, (void*)regs.rip, NULL);
    if (errno != 0) perror("PEEKTEXT 실패");

    printf("RIP = 0x%llx | instr = 0x%lx\n", regs.rip, instr);
    print_registers(&regs);

    ptrace(PTRACE_SINGLESTEP, pid, NULL, NULL);
    waitpid(pid, NULL, 0);
}

void handle_continue(pid_t pid) {
    ptrace(PTRACE_CONT, pid, NULL, NULL);
    int status;
    waitpid(pid, &status, 0);

    if (WIFEXITED(status))
        printf("디버깅 대상 종료됨 (exit code %d)\n", WEXITSTATUS(status));
}

void run_debugger(pid_t pid) {
    waitpid(pid, NULL, 0);

    char cmd[100];
    while (1) {
        printf("SWINGdbg >>> ");
        if (!fgets(cmd, sizeof(cmd), stdin)) continue;
        cmd[strcspn(cmd, "\n")] = '\0';  

        if (!strcmp(cmd, "ni"))
            handle_ni(pid);
        else if (!strcmp(cmd, "c")) {
            handle_continue(pid);
            break;
        } else
            printf("지원 명령: ni / c\n");
    }
}

void run_target(const char *program) {
    if (ptrace(PTRACE_TRACEME, 0, NULL, NULL) == -1) {
        perror("TRACEME 실패");
        exit(1);
    }
    execl(program, program, NULL);
    perror("exec 실패");
    exit(1);
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <target program>\n", argv[0]);
        return 1;
    }

    pid_t pid = fork();
    if (pid == -1) {
        perror("fork 실패");
        return 1;
    }

    if (pid == 0)
        run_target(argv[1]);
    else
        run_debugger(pid);

    return 0;
}
